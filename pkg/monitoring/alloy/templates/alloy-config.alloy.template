logging {
  level  = "info"
  format = "logfmt"
}

prometheus.operator.servicemonitors "giantswarm_legacy" {
  forward_to = [prometheus.remote_write.giantswarm.receiver]
  selector {
    match_expression {
      key      = "application.giantswarm.io/team"
      operator = "Exists"
    }
    match_expression {
      key      = "observability.giantswarm.io/tenant"
      operator = "DoesNotExist"
    }
  }
  scrape {
    default_scrape_interval = "60s"
  }
  clustering {
    enabled = true
  }
}

prometheus.operator.podmonitors "giantswarm_legacy" {
  forward_to = [prometheus.remote_write.giantswarm.receiver]
  selector {
    match_expression {
      key      = "application.giantswarm.io/team"
      operator = "Exists"
    }
    match_expression {
      key      = "observability.giantswarm.io/tenant"
      operator = "DoesNotExist"
    }
  }
  scrape {
    default_scrape_interval = "60s"
  }
  clustering {
    enabled = true
  }
}

// we create a podmonitor and servicemonitor component per tenant because we cannot read pod/service monitor labels through relabelling.
{{ range .Tenants }}
// remote write pipeline configuration for tenant {{ . }}
prometheus.operator.servicemonitors "{{ . }}" {
  forward_to = [prometheus.remote_write.{{ . }}.receiver]
  selector {
    match_expression {
      key      = "observability.giantswarm.io/tenant"
      operator = "In"
      values   = [{{ . | quote }}]
    }
  }
  scrape {
    default_scrape_interval = "60s"
  }
  clustering {
    enabled = true
  }
}

prometheus.operator.podmonitors "{{ . }}" {
  forward_to = [prometheus.remote_write.{{ . }}.receiver]
  selector {
    match_expression {
      key      = "observability.giantswarm.io/tenant"
      operator = "In"
      values   = [{{ . | quote }}]
    }
  }
  scrape {
    default_scrape_interval = "60s"
  }
  clustering {
    enabled = true
  }
}

prometheus.remote_write "{{ . }}" {
  endpoint {
    url            = env("{{ $.RemoteWriteURLEnvVarName }}")
    name           = env("{{ $.RemoteWriteNameEnvVarName }}")
    enable_http2   = false
    remote_timeout = "{{ $.RemoteWriteTimeout }}"
    basic_auth {
      username = env("{{ $.RemoteWriteBasicAuthUsernameEnvVarName }}")
      password = env("{{ $.RemoteWriteBasicAuthPasswordEnvVarName }}")
    }
    headers = {
      "X-Scope-OrgID" = "{{ . }}",
    }
    tls_config {
      insecure_skip_verify = {{ $.RemoteWriteTLSInsecureSkipVerify }}
    }
    queue_config {
      capacity             = {{ $.QueueConfigCapacity }}
      max_shards           = {{ $.QueueConfigMaxShards }}
      max_samples_per_send = {{ $.QueueConfigMaxSamplesPerSend }}
      sample_age_limit     = "{{ $.QueueConfigSampleAgeLimit }}"
    }
  }
  wal {
    truncate_frequency = "{{ $.WALTruncateFrequency }}"
  }
  external_labels = {
    {{- range $key, $value := $.ExternalLabels }}
    "{{ $key }}" = "{{ $value }}",
    {{- end }}
  }
}

{{ end }}
